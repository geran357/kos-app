import {
  getTrad,
  useDeleteVersionMutation,
  useGetInfoQuery,
  useRegenerateDocMutation
} from "./chunk-P3BDRLR2.js";
import "./chunk-SR3ZFATM.js";
import "./chunk-TQBK6FVD.js";
import "./chunk-66QVS354.js";
import "./chunk-C7H2BX76.js";
import "./chunk-SONJSO7S.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-GIFDE7KJ.js";
import "./chunk-37WGS2TE.js";
import "./chunk-AGPA3PDN.js";
import "./chunk-X3YAAK27.js";
import "./chunk-M5EKOYPZ.js";
import "./chunk-RPX6VIML.js";
import "./chunk-O6QFUROF.js";
import "./chunk-JQGYXQZV.js";
import "./chunk-WAZBS6A2.js";
import "./chunk-FYKRZROT.js";
import "./chunk-BCT6ZULZ.js";
import "./chunk-5D5GGZMH.js";
import "./chunk-255SDGHL.js";
import "./chunk-ZESFYHFX.js";
import "./chunk-MMOBCIZG.js";
import {
  ConfirmDialog,
  Layouts
} from "./chunk-2GCASHQN.js";
import {
  Page,
  useAPIErrorHandler,
  useNotification,
  useRBAC
} from "./chunk-SQPETXTC.js";
import {
  Dialog,
  EmptyStateLayout,
  Flex,
  IconButton,
  LinkButton,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
  Typography,
  useIntl
} from "./chunk-7N3PD54T.js";
import "./chunk-2JZ35VNI.js";
import "./chunk-WHKY4GB5.js";
import "./chunk-IYHTQODQ.js";
import {
  PERMISSIONS
} from "./chunk-PUEBPDXK.js";
import {
  ForwardRef$3r,
  ForwardRef$51,
  ForwardRef$j
} from "./chunk-DICHSZ7M.js";
import {
  require_jsx_runtime
} from "./chunk-QBLEIVF7.js";
import {
  dt
} from "./chunk-6VAEU2GM.js";
import {
  require_react
} from "./chunk-BCGHH3YY.js";
import {
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/@strapi/plugin-documentation/dist/_chunks/App-Bh6ZOYCv.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var App = () => {
  var _a;
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { formatAPIError } = useAPIErrorHandler();
  const { data, isLoading: isLoadingInfo, isError } = useGetInfoQuery();
  const [regenerate] = useRegenerateDocMutation();
  const [deleteVersion] = useDeleteVersionMutation();
  const [showConfirmDelete, setShowConfirmDelete] = React.useState(false);
  const [versionToDelete, setVersionToDelete] = React.useState();
  const { allowedActions, isLoading: isLoadingRBAC } = useRBAC(PERMISSIONS);
  const isLoading = isLoadingInfo || isLoadingRBAC;
  const colCount = 4;
  const rowCount = (((_a = data == null ? void 0 : data.docVersions) == null ? void 0 : _a.length) || 0) + 1;
  const handleRegenerateDoc = (version) => {
    regenerate({ version }).unwrap().then(() => {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.generate.success"),
          defaultMessage: "Successfully generated documentation"
        })
      });
    }).catch((err) => {
      toggleNotification({
        type: "warning",
        message: formatAPIError(err)
      });
    });
  };
  const handleConfirmDelete = async () => {
    if (!versionToDelete) {
      return;
    }
    await deleteVersion({ version: versionToDelete }).unwrap().then(() => {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.delete.success"),
          defaultMessage: "Successfully deleted documentation"
        })
      });
    }).catch((err) => {
      toggleNotification({
        type: "warning",
        message: formatAPIError(err)
      });
    });
    setShowConfirmDelete(!showConfirmDelete);
  };
  const handleClickDelete = (version) => {
    setVersionToDelete(version);
    setShowConfirmDelete(!showConfirmDelete);
  };
  const title = formatMessage({
    id: getTrad("plugin.name"),
    defaultMessage: "Documentation"
  });
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (isError) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime.jsxs)(Layouts.Root, { children: [
    (0, import_jsx_runtime.jsx)(Page.Title, { children: title }),
    (0, import_jsx_runtime.jsxs)(Page.Main, { children: [
      (0, import_jsx_runtime.jsx)(
        Layouts.Header,
        {
          title,
          subtitle: formatMessage({
            id: getTrad("pages.PluginPage.header.description"),
            defaultMessage: "Configure the documentation plugin"
          }),
          primaryAction: (0, import_jsx_runtime.jsx)(
            OpenDocLink,
            {
              disabled: !allowedActions.canRead || !(data == null ? void 0 : data.currentVersion) || !(data == null ? void 0 : data.prefix),
              href: createDocumentationHref(`${data == null ? void 0 : data.prefix}/v${data == null ? void 0 : data.currentVersion}`),
              startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$3r, {}),
              children: formatMessage({
                id: getTrad("pages.PluginPage.Button.open"),
                defaultMessage: "Open Documentation"
              })
            }
          )
        }
      ),
      (0, import_jsx_runtime.jsx)(Layouts.Content, { children: (data == null ? void 0 : data.docVersions.length) ? (0, import_jsx_runtime.jsxs)(Table, { colCount, rowCount, children: [
        (0, import_jsx_runtime.jsx)(Thead, { children: (0, import_jsx_runtime.jsxs)(Tr, { children: [
          (0, import_jsx_runtime.jsx)(Th, { children: (0, import_jsx_runtime.jsx)(Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({
            id: getTrad("pages.PluginPage.table.version"),
            defaultMessage: "Version"
          }) }) }),
          (0, import_jsx_runtime.jsx)(Th, { children: (0, import_jsx_runtime.jsx)(Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({
            id: getTrad("pages.PluginPage.table.generated"),
            defaultMessage: "Last Generated"
          }) }) })
        ] }) }),
        (0, import_jsx_runtime.jsx)(Tbody, { children: data.docVersions.slice(0).sort((a, b) => a.generatedDate < b.generatedDate ? 1 : -1).map((doc) => (0, import_jsx_runtime.jsxs)(Tr, { children: [
          (0, import_jsx_runtime.jsx)(Td, { width: "50%", children: (0, import_jsx_runtime.jsx)(Typography, { children: doc.version }) }),
          (0, import_jsx_runtime.jsx)(Td, { width: "50%", children: (0, import_jsx_runtime.jsx)(Typography, { children: doc.generatedDate }) }),
          (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsxs)(Flex, { justifyContent: "end", onClick: (e) => e.stopPropagation(), children: [
            (0, import_jsx_runtime.jsx)(
              IconButton,
              {
                tag: "a",
                disabled: !allowedActions.canRead,
                href: createDocumentationHref(`${data.prefix}/v${doc.version}`),
                variant: "ghost",
                target: "_blank",
                rel: "noopener noreferrer",
                label: formatMessage(
                  {
                    id: getTrad("pages.PluginPage.table.icon.show"),
                    defaultMessage: "Open {target}"
                  },
                  { target: `${doc.version}` }
                ),
                children: (0, import_jsx_runtime.jsx)(ForwardRef$3r, {})
              }
            ),
            allowedActions.canRegenerate ? (0, import_jsx_runtime.jsx)(
              IconButton,
              {
                onClick: () => handleRegenerateDoc(doc.version),
                variant: "ghost",
                label: formatMessage(
                  {
                    id: getTrad("pages.PluginPage.table.icon.regenerate"),
                    defaultMessage: "Regenerate {target}"
                  },
                  { target: `${doc.version}` }
                ),
                children: (0, import_jsx_runtime.jsx)(ForwardRef$51, {})
              }
            ) : null,
            allowedActions.canUpdate && doc.version !== data.currentVersion ? (0, import_jsx_runtime.jsx)(
              IconButton,
              {
                onClick: () => handleClickDelete(doc.version),
                variant: "ghost",
                label: formatMessage(
                  {
                    id: "global.delete-target",
                    defaultMessage: "Delete {target}"
                  },
                  { target: `${doc.version}` }
                ),
                children: (0, import_jsx_runtime.jsx)(ForwardRef$j, {})
              }
            ) : null
          ] }) })
        ] }, doc.version)) })
      ] }) : (0, import_jsx_runtime.jsx)(EmptyStateLayout, { content: "", icon: null }) }),
      (0, import_jsx_runtime.jsx)(Dialog.Root, { open: showConfirmDelete, onOpenChange: setShowConfirmDelete, children: (0, import_jsx_runtime.jsx)(ConfirmDialog, { onConfirm: handleConfirmDelete }) })
    ] })
  ] });
};
var OpenDocLink = dt(LinkButton)`
  text-decoration: none;
`;
var createDocumentationHref = (path) => {
  if (path.startsWith("http")) {
    return path;
  }
  if (path.startsWith("/")) {
    return `${window.strapi.backendURL}${path}`;
  }
  return `${window.strapi.backendURL}/${path}`;
};
export {
  App
};
//# sourceMappingURL=App-Bh6ZOYCv-Q6WKG2U4.js.map
