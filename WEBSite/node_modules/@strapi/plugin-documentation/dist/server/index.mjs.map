{"version":3,"file":"index.mjs","sources":["../../server/src/utils.ts","../../server/src/bootstrap.ts","../../server/src/middlewares/documentation.ts","../../server/src/register.ts","../../server/src/services/helpers/utils/pascal-case.ts","../../server/src/services/helpers/utils/query-params.ts","../../server/src/services/helpers/utils/loop-content-type-names.ts","../../server/src/services/helpers/utils/get-api-responses.ts","../../server/src/services/helpers/utils/routes.ts","../../server/src/services/helpers/build-api-endpoint-path.ts","../../server/src/services/helpers/utils/get-schema-data.ts","../../server/src/services/helpers/utils/clean-schema-attributes.ts","../../server/src/services/helpers/build-component-schema.ts","../../server/src/services/utils/get-plugins-that-need-documentation.ts","../../server/src/services/documentation.ts","../../server/src/services/override.ts","../../server/src/services/index.ts","../../server/src/middlewares/restrict-access.ts","../../server/src/routes/index.ts","../../server/src/controllers/documentation.ts","../../server/src/controllers/index.ts","../../server/src/config/default-plugin-config.ts","../../server/src/config/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\n\nimport type { Services } from './services';\n\nexport const getService = <TName extends keyof Services>(\n  name: TName,\n  { strapi }: { strapi: Core.Strapi } = { strapi: global.strapi }\n): Services[TName] => {\n  return strapi.plugin('documentation').service<Services[TName]>(name);\n};\n\nexport default {\n  getService,\n};\n","import type { Core } from '@strapi/types';\n\nimport { getService } from './utils';\n\n// Add permissions\nconst RBAC_ACTIONS = [\n  {\n    section: 'plugins',\n    displayName: 'Access the Documentation',\n    uid: 'read',\n    pluginName: 'documentation',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Update and delete',\n    uid: 'settings.update',\n    pluginName: 'documentation',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Regenerate',\n    uid: 'settings.regenerate',\n    pluginName: 'documentation',\n  },\n  {\n    section: 'settings',\n    displayName: 'Access the documentation settings page',\n    uid: 'settings.read',\n    pluginName: 'documentation',\n    category: 'documentation',\n  },\n];\n\nexport async function bootstrap({ strapi }: { strapi: Core.Strapi }) {\n  await strapi.service('admin::permission').actionProvider.registerMany(RBAC_ACTIONS);\n\n  const pluginStore = strapi.store!({\n    environment: '',\n    type: 'plugin',\n    name: 'documentation',\n  });\n\n  const config = await pluginStore.get({ key: 'config' });\n\n  if (!config) {\n    pluginStore.set({ key: 'config', value: { restrictedAccess: false } });\n  }\n\n  await getService('documentation').generateFullDoc();\n}\n","import path from 'path';\nimport koaStatic from 'koa-static';\nimport swaggerUi from 'swagger-ui-dist';\n\nimport type { Core } from '@strapi/types';\n\nexport const addDocumentMiddlewares = async ({ strapi }: { strapi: Core.Strapi }) => {\n  strapi.server.routes([\n    {\n      method: 'GET',\n      path: '/plugins/documentation/(.*)',\n      async handler(ctx, next) {\n        ctx.url = path.basename(ctx.url);\n\n        return koaStatic(swaggerUi.getAbsoluteFSPath(), {\n          maxage: 86400000,\n          defer: true,\n        })(ctx, next);\n      },\n      config: {\n        auth: false,\n      },\n    },\n  ]);\n};\n","import type { Core } from '@strapi/types';\n\nimport { addDocumentMiddlewares } from './middlewares/documentation';\n\nexport async function register({ strapi }: { strapi: Core.Strapi }) {\n  await addDocumentMiddlewares({ strapi });\n}\n","import _ from 'lodash';\n\nconst pascalCase = (string: string) => {\n  return _.upperFirst(_.camelCase(string));\n};\n\nexport default pascalCase;\n","import type { OpenAPIV3 } from 'openapi-types';\n\nconst params: OpenAPIV3.ParameterObject[] = [\n  {\n    name: 'sort',\n    in: 'query',\n    description: 'Sort by attributes ascending (asc) or descending (desc)',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'string',\n    },\n  },\n  {\n    name: 'pagination[withCount]',\n    in: 'query',\n    description: 'Return page/pageSize (default: true)',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'boolean',\n    },\n  },\n  {\n    name: 'pagination[page]',\n    in: 'query',\n    description: 'Page number (default: 0)',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'integer',\n    },\n  },\n  {\n    name: 'pagination[pageSize]',\n    in: 'query',\n    description: 'Page size (default: 25)',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'integer',\n    },\n  },\n  {\n    name: 'pagination[start]',\n    in: 'query',\n    description: 'Offset value (default: 0)',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'integer',\n    },\n  },\n  {\n    name: 'pagination[limit]',\n    in: 'query',\n    description: 'Number of entities to return (default: 25)',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'integer',\n    },\n  },\n  {\n    name: 'fields',\n    in: 'query',\n    description: 'Fields to return (ex: title,author)',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'string',\n    },\n  },\n  {\n    name: 'populate',\n    in: 'query',\n    description: 'Relations to return',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'string',\n    },\n  },\n  {\n    name: 'filters',\n    in: 'query',\n    description: 'Filters to apply',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'object',\n      additionalProperties: true,\n    },\n    style: 'deepObject',\n  },\n  {\n    name: 'locale',\n    in: 'query',\n    description: 'Locale to apply',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'string',\n    },\n  },\n];\n\nexport default params;\n","import _ from 'lodash';\n\nimport type { Api, ApiInfo } from '../../../types';\n\n/**\n * @description A reusable loop for building api endpoint paths and component schemas\n */\nconst loopContentTypeNames = (api: Api, callback: (info: ApiInfo) => any) => {\n  let result = {};\n  for (const contentTypeName of api.ctNames) {\n    // Get the attributes found on the api's contentType\n    const uid = `${api.getter}::${api.name}.${contentTypeName}`;\n\n    const { attributes, info: contentTypeInfo, kind } = strapi.contentType(uid as any);\n\n    // Get the routes for the current api\n    const routeInfo =\n      api.getter === 'plugin'\n        ? // @ts-expect-error â€“ TODO: fix this\n          strapi.plugin(api.name).routes['content-api']\n        : strapi.api(api.name).routes[contentTypeName];\n\n    // Continue to next iteration if routeInfo is undefined\n    if (!routeInfo) {\n      continue;\n    }\n\n    // Uppercase the first letter of the api name\n    const apiName = _.upperFirst(api.name);\n\n    // Create a unique name if the api name and contentType name don't match\n    const uniqueName =\n      api.name === contentTypeName ? apiName : `${apiName} - ${_.upperFirst(contentTypeName)}`;\n\n    const apiInfo = {\n      ...api,\n      routeInfo,\n      attributes,\n      uniqueName,\n      contentTypeInfo,\n      kind,\n    };\n\n    result = {\n      ...result,\n      ...callback(apiInfo),\n    };\n  }\n\n  return result;\n};\n\nexport default loopContentTypeNames;\n","import type { OpenAPIV3 } from 'openapi-types';\nimport pascalCase from './pascal-case';\n\ninterface Options {\n  uniqueName: string;\n  route: {\n    method: string;\n  };\n  isListOfEntities?: boolean;\n  isLocalizationPath?: boolean;\n}\n\n/**\n * @description - Builds the Swagger response object for a given api\n */\nconst getApiResponse = ({\n  uniqueName,\n  route,\n  isListOfEntities = false,\n}: Options): OpenAPIV3.ResponsesObject => {\n  const getSchema = (): OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject => {\n    if (route.method === 'DELETE') {\n      return {\n        type: 'integer',\n        format: 'int64',\n      };\n    }\n\n    if (isListOfEntities) {\n      return { $ref: `#/components/schemas/${pascalCase(uniqueName)}ListResponse` };\n    }\n\n    return { $ref: `#/components/schemas/${pascalCase(uniqueName)}Response` };\n  };\n\n  const schema = getSchema();\n\n  return {\n    200: {\n      description: 'OK',\n      content: {\n        'application/json': {\n          schema,\n        },\n      },\n    },\n    400: {\n      description: 'Bad Request',\n      content: {\n        'application/json': {\n          schema: {\n            $ref: '#/components/schemas/Error',\n          },\n        },\n      },\n    },\n    401: {\n      description: 'Unauthorized',\n      content: {\n        'application/json': {\n          schema: {\n            $ref: '#/components/schemas/Error',\n          },\n        },\n      },\n    },\n    403: {\n      description: 'Forbidden',\n      content: {\n        'application/json': {\n          schema: {\n            $ref: '#/components/schemas/Error',\n          },\n        },\n      },\n    },\n    404: {\n      description: 'Not Found',\n      content: {\n        'application/json': {\n          schema: {\n            $ref: '#/components/schemas/Error',\n          },\n        },\n      },\n    },\n    500: {\n      description: 'Internal Server Error',\n      content: {\n        'application/json': {\n          schema: {\n            $ref: '#/components/schemas/Error',\n          },\n        },\n      },\n    },\n  };\n};\n\nexport default getApiResponse;\n","const hasFindMethod = (handler: unknown) => {\n  if (typeof handler === 'string') {\n    return handler.split('.').pop() === 'find';\n  }\n\n  return false;\n};\n\nexport { hasFindMethod };\n","import _ from 'lodash';\nimport * as pathToRegexp from 'path-to-regexp';\n\nimport type { Core } from '@strapi/types';\nimport type { OpenAPIV3 } from 'openapi-types';\n\nimport pascalCase from './utils/pascal-case';\nimport queryParams from './utils/query-params';\nimport loopContentTypeNames from './utils/loop-content-type-names';\nimport getApiResponses from './utils/get-api-responses';\nimport { hasFindMethod } from './utils/routes';\n\nimport type { Api, ApiInfo } from '../../types';\n\n/**\n * @description Parses a route with ':variable'\n *\n * @param {string} routePath - The route's path property\n * @returns {string}\n */\nconst parsePathWithVariables = (routePath: string) => {\n  return pathToRegexp\n    .parse(routePath)\n    .map((token) => {\n      if (_.isObject(token)) {\n        return `${token.prefix}{${token.name}}`;\n      }\n\n      return token;\n    })\n    .join('');\n};\n\n/**\n * @description Builds the required object for a path parameter\n *\n * @param {string} routePath - The route's path property\n *\n * @returns {object } Swagger path params object\n */\nconst getPathParams = (routePath: string): OpenAPIV3.ParameterObject[] => {\n  return pathToRegexp.parse(routePath).reduce((acc, param) => {\n    if (!(typeof param === 'object')) {\n      return acc;\n    }\n\n    acc.push({\n      name: `${param.name}`,\n      in: 'path',\n      description: '',\n      deprecated: false,\n      required: true,\n      schema: { type: 'number' },\n    });\n\n    return acc;\n  }, [] as OpenAPIV3.ParameterObject[]);\n};\n\nconst getPathWithPrefix = (prefix: string | undefined, route: Core.Route) => {\n  // When the prefix is set on the routes and\n  // the current route is not trying to remove it\n  if (prefix && !_.has(route.config, 'prefix')) {\n    // Add the prefix to the path\n    return prefix.concat(route.path);\n  }\n\n  // Otherwise just return path\n  return route.path;\n};\n/**\n * @description Gets all paths based on routes\n *\n * @param {object} apiInfo\n * @property {object} apiInfo.routeInfo - The api routes object\n * @property {string} apiInfo.uniqueName - Content type name | Api name + Content type name\n * @property {object} apiInfo.contentTypeInfo - The info object found on content type schemas\n *\n * @returns {object}\n */\nconst getPaths = ({ routeInfo, uniqueName, contentTypeInfo, kind }: ApiInfo) => {\n  // Get the routes for the current content type\n  const contentTypeRoutes = routeInfo.routes.filter((route) => {\n    return (\n      route.path.includes(contentTypeInfo.pluralName) ||\n      route.path.includes(contentTypeInfo.singularName)\n    );\n  });\n\n  const paths = contentTypeRoutes.reduce((acc: any, route: Core.Route) => {\n    // TODO: Find a more reliable way to determine list of entities vs a single entity\n    const isListOfEntities = hasFindMethod(route.handler);\n    const methodVerb = route.method.toLowerCase();\n    const hasPathParams = route.path.includes('/:');\n    const pathWithPrefix = getPathWithPrefix(routeInfo.prefix, route);\n    const routePath = hasPathParams ? parsePathWithVariables(pathWithPrefix) : pathWithPrefix;\n\n    const responses = getApiResponses({\n      uniqueName,\n      route,\n      isListOfEntities: kind !== 'singleType' && isListOfEntities,\n    });\n\n    const swaggerConfig: OpenAPIV3.OperationObject = {\n      responses,\n      tags: [_.upperFirst(uniqueName)],\n      parameters: [],\n      operationId: `${methodVerb}${routePath}`,\n    };\n\n    if (isListOfEntities) {\n      swaggerConfig.parameters?.push(...queryParams);\n    }\n\n    if (hasPathParams) {\n      const pathParams = getPathParams(route.path);\n      swaggerConfig.parameters?.push(...pathParams);\n    }\n\n    if (['post', 'put'].includes(methodVerb)) {\n      const refName = 'Request';\n      const requestBody = {\n        required: true,\n        content: {\n          'application/json': {\n            schema: {\n              $ref: `#/components/schemas/${pascalCase(uniqueName)}${refName}`,\n            },\n          },\n        },\n      };\n\n      swaggerConfig.requestBody = requestBody;\n    }\n\n    _.set(acc, `${routePath}.${methodVerb}`, swaggerConfig);\n\n    return acc;\n  }, {});\n\n  return paths;\n};\n\n/**\n * @description - Builds the Swagger paths object for each api\n */\nconst buildApiEndpointPath = (api: Api) => {\n  // A reusable loop for building paths and component schemas\n  // Uses the api param to build a new set of params for each content type\n  // Passes these new params to the function provided\n  return loopContentTypeNames(api, getPaths);\n};\n\nexport default buildApiEndpointPath;\n","import type { OpenAPIV3 } from 'openapi-types';\n\n/**\n * @description Determines the format of the data response\n *\n * @param {boolean} isListOfEntities - Checks for a multiple entities\n * @param {object} attributes - The attributes found on a contentType\n\n * @returns object | array of attributes\n */\nexport default (\n  isListOfEntities: boolean,\n  attributes: Record<string, OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject>\n): OpenAPIV3.SchemaObject => {\n  if (isListOfEntities) {\n    return {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: { type: 'number' },\n          documentId: { type: 'string' },\n          ...attributes,\n        },\n      },\n    };\n  }\n\n  return {\n    type: 'object',\n    properties: {\n      id: { type: 'number' },\n      documentId: { type: 'string' },\n      ...attributes,\n    },\n  };\n};\n","import type { Struct } from '@strapi/types';\nimport type { OpenAPIV3 } from 'openapi-types';\n\nimport getSchemaData from './get-schema-data';\nimport pascalCase from './pascal-case';\n\ninterface Options {\n  typeMap?: Map<string, boolean>;\n  isRequest?: boolean;\n  didAddStrapiComponentsToSchemas: (name: string, schema: object) => boolean;\n}\n\n/**\n * @description - Convert attribute component names to OpenAPI component names\n *\n * @returns OpenAPI component name\n */\nconst convertComponentName = (component: string, isRef = false): string => {\n  const cleanComponentName = `${pascalCase(component)}Component`;\n\n  if (isRef) {\n    return `#/components/schemas/${cleanComponentName}`;\n  }\n  return cleanComponentName;\n};\n\n/**\n * @description - Converts types found on attributes to OpenAPI acceptable data types\n *\n * @returns Attributes using OpenAPI acceptable data types\n */\nconst cleanSchemaAttributes = (\n  attributes: Struct.SchemaAttributes,\n  { typeMap = new Map(), isRequest = false, didAddStrapiComponentsToSchemas }: Options\n) => {\n  const schemaAttributes: Record<string, OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject> = {};\n\n  for (const prop of Object.keys(attributes)) {\n    const attribute = attributes[prop];\n\n    switch (attribute.type) {\n      case 'password': {\n        if (!isRequest) {\n          break;\n        }\n\n        schemaAttributes[prop] = { type: 'string', format: 'password', example: '*******' };\n        break;\n      }\n      case 'email': {\n        schemaAttributes[prop] = { type: 'string', format: 'email' };\n        break;\n      }\n      case 'string':\n      case 'text':\n      case 'richtext': {\n        schemaAttributes[prop] = { type: 'string' };\n        break;\n      }\n      case 'timestamp': {\n        schemaAttributes[prop] = { type: 'string', format: 'timestamp', example: Date.now() };\n        break;\n      }\n      case 'time': {\n        schemaAttributes[prop] = { type: 'string', format: 'time', example: '12:54.000' };\n        break;\n      }\n      case 'date': {\n        schemaAttributes[prop] = { type: 'string', format: 'date' };\n        break;\n      }\n      case 'datetime': {\n        schemaAttributes[prop] = { type: 'string', format: 'date-time' };\n        break;\n      }\n      case 'boolean': {\n        schemaAttributes[prop] = { type: 'boolean' };\n        break;\n      }\n      case 'enumeration': {\n        schemaAttributes[prop] = { type: 'string', enum: [...attribute.enum] };\n        break;\n      }\n      case 'decimal':\n      case 'float': {\n        schemaAttributes[prop] = { type: 'number', format: 'float' };\n        break;\n      }\n      case 'integer': {\n        schemaAttributes[prop] = { type: 'integer' };\n        break;\n      }\n      case 'biginteger': {\n        schemaAttributes[prop] = { type: 'string', pattern: '^\\\\d*$', example: '123456789' };\n        break;\n      }\n      case 'json':\n      case 'blocks': {\n        schemaAttributes[prop] = {};\n        break;\n      }\n      case 'uid': {\n        schemaAttributes[prop] = { type: 'string' };\n        break;\n      }\n      case 'component': {\n        const componentAttributes = strapi.components[attribute.component].attributes;\n        const rawComponentSchema: OpenAPIV3.SchemaObject = {\n          type: 'object',\n          properties: {\n            ...(isRequest ? {} : { id: { type: 'number' } }),\n            ...cleanSchemaAttributes(componentAttributes, {\n              typeMap,\n              isRequest,\n              didAddStrapiComponentsToSchemas,\n            }),\n          },\n        };\n\n        const refComponentSchema: OpenAPIV3.ReferenceObject = {\n          $ref: convertComponentName(attribute.component, true),\n        };\n\n        const componentExists = didAddStrapiComponentsToSchemas(\n          convertComponentName(attribute.component),\n          rawComponentSchema\n        );\n\n        const finalComponentSchema = componentExists ? refComponentSchema : rawComponentSchema;\n        if (attribute.repeatable) {\n          schemaAttributes[prop] = {\n            type: 'array',\n            items: finalComponentSchema,\n          };\n        } else {\n          schemaAttributes[prop] = finalComponentSchema;\n        }\n        break;\n      }\n      case 'dynamiczone': {\n        const components = attribute.components.map((component) => {\n          const componentAttributes = strapi.components[component].attributes;\n          const rawComponentSchema: OpenAPIV3.SchemaObject = {\n            type: 'object',\n            properties: {\n              ...(isRequest ? {} : { id: { type: 'number' } }),\n              __component: { type: 'string', enum: [component] },\n              ...cleanSchemaAttributes(componentAttributes, {\n                typeMap,\n                isRequest,\n                didAddStrapiComponentsToSchemas,\n              }),\n            },\n          };\n\n          const refComponentSchema: OpenAPIV3.ReferenceObject = {\n            $ref: convertComponentName(component, true),\n          };\n\n          const componentExists = didAddStrapiComponentsToSchemas(\n            convertComponentName(component),\n            rawComponentSchema\n          );\n          const finalComponentSchema = componentExists ? refComponentSchema : rawComponentSchema;\n          return finalComponentSchema;\n        });\n        let discriminator: OpenAPIV3.DiscriminatorObject | undefined;\n        if (components.every((component) => Object.hasOwn(component, '$ref'))) {\n          discriminator = {\n            propertyName: '__component',\n            mapping: attribute.components.reduce(\n              (acc, component) => {\n                acc[component] = convertComponentName(component, true);\n                return acc;\n              },\n              {} as {\n                [value: string]: string;\n              }\n            ),\n          };\n        }\n\n        schemaAttributes[prop] = {\n          type: 'array',\n          items: {\n            anyOf: components,\n          },\n          discriminator,\n        };\n        break;\n      }\n      case 'media': {\n        const imageAttributes = strapi.contentType('plugin::upload.file').attributes;\n        const isListOfEntities = attribute.multiple ?? false;\n\n        if (isRequest) {\n          const oneOfType: OpenAPIV3.SchemaObject = {\n            oneOf: [{ type: 'integer' }, { type: 'string' }],\n            example: 'string or id',\n          };\n\n          schemaAttributes[prop] = isListOfEntities\n            ? { type: 'array', items: oneOfType }\n            : oneOfType;\n          break;\n        }\n\n        schemaAttributes[prop] = getSchemaData(\n          isListOfEntities,\n          cleanSchemaAttributes(imageAttributes, { typeMap, didAddStrapiComponentsToSchemas })\n        );\n        break;\n      }\n\n      case 'relation': {\n        const isListOfEntities = attribute.relation.includes('ToMany');\n\n        if (isRequest) {\n          const oneOfType: OpenAPIV3.SchemaObject = {\n            oneOf: [{ type: 'integer' }, { type: 'string' }],\n            example: 'string or id',\n          };\n\n          schemaAttributes[prop] = isListOfEntities\n            ? { type: 'array', items: oneOfType }\n            : oneOfType;\n          break;\n        }\n\n        if (!('target' in attribute) || !attribute.target || typeMap.has(attribute.target)) {\n          schemaAttributes[prop] = getSchemaData(isListOfEntities, {});\n\n          break;\n        }\n\n        typeMap.set(attribute.target, true);\n        const targetAttributes = strapi.contentType(attribute.target).attributes;\n\n        schemaAttributes[prop] = getSchemaData(\n          isListOfEntities,\n          cleanSchemaAttributes(targetAttributes, {\n            typeMap,\n            isRequest,\n            didAddStrapiComponentsToSchemas,\n          })\n        );\n\n        break;\n      }\n      default: {\n        // @ts-expect-error - This is a catch all for any other types\n        throw new Error(`Invalid type ${attribute.type} while generating open api schema.`);\n      }\n    }\n  }\n\n  return schemaAttributes;\n};\n\nexport default cleanSchemaAttributes;\n","import _ from 'lodash';\n\nimport type { OpenAPIV3 } from 'openapi-types';\nimport type { Core, Struct } from '@strapi/types';\n\nimport cleanSchemaAttributes from './utils/clean-schema-attributes';\nimport loopContentTypeNames from './utils/loop-content-type-names';\nimport pascalCase from './utils/pascal-case';\nimport { hasFindMethod } from './utils/routes';\n\nimport type { Api, ApiInfo } from '../../types';\n\nconst getRequiredAttributes = (allAttributes: Struct.SchemaAttributes) => {\n  const requiredAttributes: string[] = [];\n\n  for (const key in allAttributes) {\n    if (allAttributes[key].required) {\n      requiredAttributes.push(key);\n    }\n  }\n\n  return requiredAttributes;\n};\n\n/**\n * @decription Get all open api schema objects for a given content type\n *\n * @param {object} apiInfo\n * @property {string} apiInfo.uniqueName - Api name | Api name + Content type name\n * @property {object} apiInfo.attributes - Attributes on content type\n * @property {object} apiInfo.routeInfo - The routes for the api\n *\n * @returns {object} Open API schemas\n */\nconst getAllSchemasForContentType = ({ routeInfo, attributes, uniqueName }: ApiInfo) => {\n  // Store response and request schemas in an object\n  let strapiComponentSchemas = {};\n  const schemas: OpenAPIV3.ComponentsObject = {};\n  const typeName = pascalCase(uniqueName);\n\n  // adds a ComponentSchema to the Schemas so it can be used as Ref\n  const didAddStrapiComponentsToSchemas = (schemaName: string, schema: OpenAPIV3.SchemaObject) => {\n    if (!Object.keys(schema) || !Object.keys(schema.properties!)) return false;\n\n    // Add the Strapi components to the schema\n    strapiComponentSchemas = {\n      ...strapiComponentSchemas,\n      [schemaName]: schema,\n    };\n\n    return true;\n  };\n\n  // Get all the route methods\n  const routeMethods = routeInfo.routes.map((route: Core.Route) => route.method);\n\n  const attributesToOmit = [\n    'createdAt',\n    'updatedAt',\n    'publishedAt',\n    'publishedBy',\n    'updatedBy',\n    'createdBy',\n  ];\n\n  const attributesForRequest = _.omit(attributes, attributesToOmit);\n  // Get a list of required attribute names\n  const requiredRequestAttributes = getRequiredAttributes(attributesForRequest);\n  // Build the request schemas when the route has POST or PUT methods\n  if (routeMethods.includes('POST') || routeMethods.includes('PUT')) {\n    // Build localization requests schemas\n\n    // Build the request schema\n    Object.assign(schemas, {\n      [`${typeName}Request`]: {\n        type: 'object',\n        required: ['data'],\n        properties: {\n          data: {\n            ...(requiredRequestAttributes.length && { required: requiredRequestAttributes }),\n            type: 'object',\n            properties: cleanSchemaAttributes(attributesForRequest, {\n              isRequest: true,\n              didAddStrapiComponentsToSchemas,\n            }),\n          },\n        },\n      },\n    });\n  }\n\n  // Check for routes that need to return a list\n  const hasListOfEntities = routeInfo.routes.filter((route: Core.Route) =>\n    hasFindMethod(route.handler)\n  ).length;\n\n  if (hasListOfEntities) {\n    // Build the list response schema\n    Object.assign(schemas, {\n      [`${typeName}ListResponse`]: {\n        type: 'object',\n        properties: {\n          data: {\n            type: 'array',\n            items: {\n              $ref: `#/components/schemas/${typeName}`,\n            },\n          },\n          meta: {\n            type: 'object',\n            properties: {\n              pagination: {\n                type: 'object',\n                properties: {\n                  page: { type: 'integer' },\n                  pageSize: { type: 'integer', minimum: 25 },\n                  pageCount: { type: 'integer', maximum: 1 },\n                  total: { type: 'integer' },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n\n  const requiredAttributes = getRequiredAttributes(attributes);\n  // Build the response schema\n  Object.assign(schemas, {\n    [`${typeName}`]: {\n      type: 'object',\n      ...(requiredAttributes.length && { required: requiredAttributes }),\n      properties: {\n        id: { type: 'number' },\n        documentId: { type: 'string' },\n        ...cleanSchemaAttributes(attributes, { didAddStrapiComponentsToSchemas }),\n      },\n    },\n\n    [`${typeName}Response`]: {\n      type: 'object',\n      properties: {\n        data: {\n          $ref: `#/components/schemas/${typeName}`,\n        },\n        meta: { type: 'object' },\n      },\n    },\n  });\n\n  return { ...schemas, ...strapiComponentSchemas };\n};\n\nconst buildComponentSchema = (api: Api) => {\n  // A reusable loop for building paths and component schemas\n  // Uses the api param to build a new set of params for each content type\n  // Passes these new params to the function provided\n  return loopContentTypeNames(api, getAllSchemasForContentType);\n};\n\nexport default buildComponentSchema;\n","import type { PluginConfig } from '../../types';\n\nconst getPluginsThatNeedDocumentation = (config: PluginConfig) => {\n  // Default plugins that need documentation generated\n  const defaultPlugins = ['upload', 'users-permissions'];\n\n  // User specified plugins that need documentation generated\n  const userPluginsConfig = config['x-strapi-config'].plugins;\n\n  if (userPluginsConfig === null) {\n    // The user hasn't specified any plugins to document, use the defaults\n    return defaultPlugins;\n  }\n\n  if (userPluginsConfig.length) {\n    // The user has specified certain plugins to document, use them\n    return userPluginsConfig;\n  }\n\n  // The user has specified that no plugins should be documented\n  return [];\n};\n\nexport { getPluginsThatNeedDocumentation };\n","import path from 'path';\nimport fs from 'fs-extra';\nimport { produce } from 'immer';\nimport type { Core } from '@strapi/types';\n\nimport { builApiEndpointPath, buildComponentSchema } from './helpers';\nimport { getPluginsThatNeedDocumentation } from './utils/get-plugins-that-need-documentation';\nimport { getService } from '../utils';\n\nimport type { Config, PluginConfig } from '../types';\n\nexport type Version = {\n  version: string;\n  generatedDate: string;\n  url: string;\n};\n\nexport type DocumentationService = ReturnType<typeof createService>;\n\nconst createService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const config = strapi.config.get('plugin::documentation') as PluginConfig;\n  const pluginsThatNeedDocumentation = getPluginsThatNeedDocumentation(config);\n  const overrideService = getService('override');\n\n  return {\n    getDocumentationVersion() {\n      return config.info.version;\n    },\n\n    getFullDocumentationPath() {\n      return path.join(strapi.dirs.app.extensions, 'documentation', 'documentation');\n    },\n\n    getDocumentationVersions(): Version[] {\n      return fs\n        .readdirSync(this.getFullDocumentationPath())\n        .map((version) => {\n          try {\n            const filePath = path.resolve(\n              this.getFullDocumentationPath(),\n              version,\n              'full_documentation.json'\n            );\n\n            const doc = JSON.parse(fs.readFileSync(filePath).toString());\n\n            const generatedDate = doc.info['x-generation-date'];\n\n            return { version, generatedDate, url: '' };\n          } catch (err) {\n            return null;\n          }\n        })\n        .filter((x) => x) as Version[];\n    },\n\n    /**\n     * Returns settings stored in core-store\n     */\n    async getDocumentationAccess() {\n      const { restrictedAccess } = (await strapi.store!({\n        environment: '',\n        type: 'plugin',\n        name: 'documentation',\n        key: 'config',\n      }).get()) as Config;\n\n      return { restrictedAccess };\n    },\n\n    getApiDocumentationPath(api: { name: string; getter: string }) {\n      if (api.getter === 'plugin') {\n        return path.join(strapi.dirs.app.extensions, api.name, 'documentation');\n      }\n\n      return path.join(strapi.dirs.app.api, api.name, 'documentation');\n    },\n\n    async deleteDocumentation(version: string) {\n      const apis = this.getPluginAndApiInfo();\n      for (const api of apis) {\n        await fs.remove(path.join(this.getApiDocumentationPath(api), version));\n      }\n\n      await fs.remove(path.join(this.getFullDocumentationPath(), version));\n    },\n\n    getPluginAndApiInfo() {\n      const pluginsToDocument = pluginsThatNeedDocumentation.map((plugin) => {\n        return {\n          name: plugin,\n          getter: 'plugin',\n          ctNames: Object.keys(strapi.plugin(plugin).contentTypes),\n        };\n      });\n\n      const apisToDocument = Object.keys(strapi.apis).map((api) => {\n        return {\n          name: api,\n          getter: 'api',\n          ctNames: Object.keys(strapi.api(api).contentTypes),\n        };\n      });\n\n      return [...apisToDocument, ...pluginsToDocument];\n    },\n\n    /**\n     * @description - Creates the Swagger json files\n     */\n    async generateFullDoc(versionOpt?: string) {\n      const version = versionOpt ?? this.getDocumentationVersion();\n\n      const apis = this.getPluginAndApiInfo();\n      const apisThatNeedGeneratedDocumentation = apis.filter(\n        ({ name }) => !overrideService.isEnabled(name)\n      );\n\n      // Initialize the generated documentation with defaults\n      const generatedDocumentation = await produce(config, async (draft) => {\n        if (draft.servers?.length === 0) {\n          // When no servers found set the defaults\n          const serverUrl = strapi.config.get('server.absoluteUrl');\n          const apiPath = strapi.config.get('api.rest.prefix');\n          draft.servers = [\n            {\n              url: `${serverUrl}${apiPath}`,\n              description: 'Development server',\n            },\n          ];\n        }\n\n        if (!draft.components) {\n          draft.components = {};\n        }\n\n        // Set the generated date\n        draft.info['x-generation-date'] = new Date().toISOString();\n        // Set the plugins that need documentation\n        draft['x-strapi-config'].plugins = pluginsThatNeedDocumentation;\n\n        // Delete the mutateDocumentation key from the config so it doesn't end up in the spec\n        delete draft['x-strapi-config'].mutateDocumentation;\n\n        // Generate the documentation for each api and update the generatedDocumentation\n        for (const api of apisThatNeedGeneratedDocumentation) {\n          const newApiPath = builApiEndpointPath(api);\n          const generatedSchemas = buildComponentSchema(api);\n\n          if (generatedSchemas) {\n            draft.components.schemas = { ...draft.components.schemas, ...generatedSchemas };\n          }\n\n          if (newApiPath) {\n            draft.paths = { ...draft.paths, ...newApiPath };\n          }\n        }\n\n        // When overrides are present update the generatedDocumentation\n        if (overrideService.registeredOverrides.length > 0) {\n          overrideService.registeredOverrides.forEach((override: Partial<PluginConfig>) => {\n            // Only run the overrrides when no override version is provided,\n            // or when the generated documentation version matches the override version\n            if (!override?.info?.version || override.info.version === version) {\n              if (override.tags) {\n                // Merge override tags with the generated tags\n                draft.tags = draft.tags || [];\n                draft.tags.push(...override.tags);\n              }\n\n              if (override.paths) {\n                // Merge override paths with the generated paths\n                // The override will add a new path or replace the value of an existing path\n                draft.paths = { ...draft.paths, ...override.paths };\n              }\n\n              if (override.components) {\n                const keys = Object.keys(override.components) as Array<\n                  keyof typeof override.components\n                >;\n\n                keys.forEach((overrideKey) => {\n                  draft.components = draft.components || {};\n\n                  const overrideValue = override.components?.[overrideKey];\n                  const originalValue = draft.components?.[overrideKey];\n\n                  Object.assign(draft.components, {\n                    [overrideKey]: {\n                      ...originalValue,\n                      ...overrideValue,\n                    },\n                  });\n                });\n              }\n            }\n          });\n        }\n      });\n\n      // Escape hatch, allow the user to provide a mutateDocumentation function that can alter any part of\n      // the generated documentation before it is written to the file system\n      const userMutatesDocumentation = config['x-strapi-config'].mutateDocumentation;\n\n      const finalDocumentation = userMutatesDocumentation\n        ? produce(generatedDocumentation, userMutatesDocumentation)\n        : generatedDocumentation;\n\n      // Get the file path for the final documentation\n      const fullDocJsonPath = path.join(\n        this.getFullDocumentationPath(),\n        version,\n        'full_documentation.json'\n      );\n      // Write the documentation to the file system\n      await fs.ensureFile(fullDocJsonPath);\n      await fs.writeJson(fullDocJsonPath, finalDocumentation, { spaces: 2 });\n    },\n  };\n};\n\nexport default createService;\n","import type { Core } from '@strapi/types';\n\nimport { getPluginsThatNeedDocumentation } from './utils/get-plugins-that-need-documentation';\nimport type { PluginConfig } from '../types';\n\nexport type OverrideService = ReturnType<typeof createService>;\n\nconst createService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const registeredOverrides: Partial<PluginConfig>[] = [];\n  const excludedFromGeneration: string[] = [];\n\n  return {\n    registeredOverrides,\n    excludedFromGeneration,\n    /**\n     *\n     * @param {(string | string[])} api - The name of the api or and array of apis to exclude from generation\n     */\n    excludeFromGeneration(api: string | string[]) {\n      if (Array.isArray(api)) {\n        excludedFromGeneration.push(...api);\n\n        return;\n      }\n\n      excludedFromGeneration.push(api);\n    },\n\n    isEnabled(name: string) {\n      return excludedFromGeneration.includes(name);\n    },\n\n    registerOverride(\n      override: Partial<PluginConfig>,\n      opts?: { pluginOrigin: string; excludeFromGeneration?: string[] }\n    ) {\n      const { pluginOrigin, excludeFromGeneration = [] } = opts ?? {};\n\n      const pluginsThatNeedDocumentation = getPluginsThatNeedDocumentation(\n        strapi.config.get('plugin::documentation')\n      );\n      // Don't apply the override if the plugin is not in the list of plugins that need documentation\n      if (pluginOrigin && !pluginsThatNeedDocumentation.includes(pluginOrigin)) return;\n\n      if (excludeFromGeneration.length) {\n        this.excludeFromGeneration(excludeFromGeneration);\n      }\n\n      let overrideToRegister = override;\n      // Parse yaml if we receive a string\n      if (typeof override === 'string') {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        overrideToRegister = require('yaml').parse(overrideToRegister);\n      }\n      // receive an object we can register it directly\n      registeredOverrides.push(overrideToRegister);\n    },\n  };\n};\n\nexport default createService;\n","// import type { Common } from '@strapi/types';\n\nimport documentation, { type DocumentationService } from './documentation';\nimport override, { type OverrideService } from './override';\n\nexport default {\n  documentation,\n  override,\n};\n\nexport type Services = {\n  documentation: DocumentationService;\n  override: OverrideService;\n};\n","import type Koa from 'koa';\nimport type {} from 'koa-session';\n\nimport type { Config } from '../types';\n\nexport default async (ctx: Koa.Context, next: Koa.Next) => {\n  const pluginStore = strapi.store({ type: 'plugin', name: 'documentation' });\n\n  const config = (await pluginStore.get({ key: 'config' })) as Config;\n\n  if (!config.restrictedAccess) {\n    return next();\n  }\n\n  if (!ctx.session || !ctx.session.documentation || !ctx.session.documentation.logged) {\n    const querystring = ctx.querystring ? `?${ctx.querystring}` : '';\n\n    return ctx.redirect(`${strapi.config.server.url}/documentation/login${querystring}`);\n  }\n\n  // Execute the action.\n  return next();\n};\n","import restrictAccess from '../middlewares/restrict-access';\n\nexport default [\n  {\n    method: 'GET',\n    path: '/',\n    handler: 'documentation.index',\n    config: {\n      auth: false,\n      middlewares: [restrictAccess],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/v:major(\\\\d+).:minor(\\\\d+).:patch(\\\\d+)',\n    handler: 'documentation.index',\n    config: {\n      auth: false,\n      middlewares: [restrictAccess],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/login',\n    handler: 'documentation.loginView',\n    config: {\n      auth: false,\n    },\n  },\n  {\n    method: 'POST',\n    path: '/login',\n    handler: 'documentation.login',\n    config: {\n      auth: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/getInfos',\n    handler: 'documentation.getInfos',\n    config: {\n      policies: [\n        { name: 'admin::hasPermissions', config: { actions: ['plugin::documentation.read'] } },\n      ],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/regenerateDoc',\n    handler: 'documentation.regenerateDoc',\n    config: {\n      policies: [\n        {\n          name: 'admin::hasPermissions',\n          config: { actions: ['plugin::documentation.settings.regenerate'] },\n        },\n      ],\n    },\n  },\n  {\n    method: 'PUT',\n    path: '/updateSettings',\n    handler: 'documentation.updateSettings',\n    config: {\n      policies: [\n        {\n          name: 'admin::hasPermissions',\n          config: { actions: ['plugin::documentation.settings.update'] },\n        },\n      ],\n    },\n  },\n  {\n    method: 'DELETE',\n    path: '/deleteDoc/:version',\n    handler: 'documentation.deleteDoc',\n    config: {\n      policies: [],\n    },\n  },\n];\n","import path from 'path';\nimport bcrypt from 'bcryptjs';\nimport fs from 'fs-extra';\nimport _ from 'lodash';\nimport koaStatic from 'koa-static';\nimport { yup, validateYupSchema } from '@strapi/utils';\n\nimport type Koa from 'koa';\nimport type {} from 'koa-body';\n\nimport { getService } from '../utils';\nimport type { Config } from '../types';\n\nconst validation = {\n  validateSettings: validateYupSchema(\n    yup.object().shape({\n      restrictedAccess: yup.boolean(),\n      password: yup\n        .string()\n        .min(8)\n        .matches(/[a-z]/, '${path} must contain at least one lowercase character')\n        .matches(/[A-Z]/, '${path} must contain at least one uppercase character')\n        .matches(/\\d/, '${path} must contain at least one number')\n        .when('restrictedAccess', (value, initSchema) => {\n          return value ? initSchema.required('password is required') : initSchema;\n        }),\n    })\n  ),\n};\n\nexport default {\n  async getInfos(ctx: Koa.Context) {\n    try {\n      const docService = getService('documentation');\n      const docVersions = docService.getDocumentationVersions();\n      const documentationAccess = await docService.getDocumentationAccess();\n\n      ctx.send({\n        docVersions,\n        currentVersion: docService.getDocumentationVersion(),\n        prefix: '/documentation',\n        documentationAccess,\n      });\n    } catch (err) {\n      strapi.log.error(err);\n      ctx.badRequest();\n    }\n  },\n\n  async index(ctx: Koa.Context, next: Koa.Next) {\n    try {\n      /**\n       * We don't expose the specs using koa-static or something else due to security reasons.\n       * That's why, we need to read the file localy and send the specs through it when we serve the Swagger UI.\n       */\n      const { major, minor, patch } = ctx.params;\n      const version =\n        major && minor && patch\n          ? `${major}.${minor}.${patch}`\n          : getService('documentation').getDocumentationVersion();\n\n      const openAPISpecsPath = path.join(\n        strapi.dirs.app.extensions,\n        'documentation',\n        'documentation',\n        version,\n        'full_documentation.json'\n      );\n\n      try {\n        const documentation = fs.readFileSync(openAPISpecsPath, 'utf8');\n\n        const layout = (await import('../public/index.html?raw')).default;\n\n        const filledLayout = _.template(layout)({\n          backendUrl: strapi.config.server.url,\n          spec: JSON.stringify(JSON.parse(documentation)),\n        });\n\n        try {\n          const layoutPath = path.resolve(\n            strapi.dirs.app.extensions,\n            'documentation',\n            'public',\n            'index.html'\n          );\n          await fs.ensureFile(layoutPath);\n          await fs.writeFile(layoutPath, filledLayout);\n\n          // Serve the file.\n          ctx.url = path.basename(`${ctx.url}/index.html`);\n\n          try {\n            const staticFolder = path.resolve(\n              strapi.dirs.app.extensions,\n              'documentation',\n              'public'\n            );\n            return koaStatic(staticFolder)(ctx, next);\n          } catch (e) {\n            strapi.log.error(e);\n          }\n        } catch (e) {\n          strapi.log.error(e);\n        }\n      } catch (e) {\n        strapi.log.error(e);\n      }\n    } catch (e) {\n      strapi.log.error(e);\n    }\n  },\n\n  async loginView(ctx: Koa.Context, next: Koa.Next) {\n    // lazy require cheerio\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const cheerio = require('cheerio');\n\n    const { error } = ctx.query;\n\n    try {\n      const layout = (await import('../public/login.html?raw')).default;\n\n      const filledLayout = _.template(layout.toString())({\n        actionUrl: `${strapi.config.server.url}/documentation/login`,\n      });\n\n      const $ = cheerio.load(filledLayout);\n\n      $('.error').text(_.isEmpty(error) ? '' : 'Wrong password...');\n\n      try {\n        const layoutPath = path.resolve(\n          strapi.dirs.app.extensions,\n          'documentation',\n          'public',\n          'login.html'\n        );\n        await fs.ensureFile(layoutPath);\n        await fs.writeFile(layoutPath, $.html());\n\n        ctx.url = path.basename(`${ctx.url}/login.html`);\n\n        try {\n          const staticFolder = path.resolve(strapi.dirs.app.extensions, 'documentation', 'public');\n          return koaStatic(staticFolder)(ctx, next);\n        } catch (e) {\n          strapi.log.error(e);\n        }\n      } catch (e) {\n        strapi.log.error(e);\n      }\n    } catch (e) {\n      strapi.log.error(e);\n    }\n  },\n\n  async login(ctx: Koa.Context) {\n    const {\n      body: { password },\n    } = ctx.request;\n\n    const { password: hash } = (await strapi\n      .store({ type: 'plugin', name: 'documentation', key: 'config' })\n      .get()) as { password: string };\n\n    const isValid = await bcrypt.compare(password, hash);\n\n    let querystring = '?error=password';\n\n    if (isValid && ctx.session) {\n      ctx.session.documentation = {\n        logged: true,\n      };\n\n      querystring = '';\n    }\n\n    ctx.redirect(`${strapi.config.server.url}/documentation${querystring}`);\n  },\n\n  async regenerateDoc(ctx: Koa.Context) {\n    const { version } = ctx.request.body;\n\n    const service = getService('documentation');\n\n    const documentationVersions = service.getDocumentationVersions().map((el) => el.version);\n\n    if (_.isEmpty(version)) {\n      return ctx.badRequest('Please provide a version.');\n    }\n\n    if (!documentationVersions.includes(version)) {\n      return ctx.badRequest('The version you are trying to generate does not exist.');\n    }\n\n    try {\n      strapi.reload.isWatching = false;\n      await service.generateFullDoc(version);\n      ctx.send({ ok: true });\n    } finally {\n      strapi.reload.isWatching = true;\n    }\n  },\n\n  async deleteDoc(ctx: Koa.Context) {\n    const { version } = ctx.params;\n\n    const service = getService('documentation');\n\n    const documentationVersions = service.getDocumentationVersions().map((el) => el.version);\n\n    if (_.isEmpty(version)) {\n      return ctx.badRequest('Please provide a version.');\n    }\n\n    if (!documentationVersions.includes(version)) {\n      return ctx.badRequest('The version you are trying to delete does not exist.');\n    }\n\n    try {\n      strapi.reload.isWatching = false;\n      await service.deleteDocumentation(version);\n      ctx.send({ ok: true });\n    } finally {\n      strapi.reload.isWatching = true;\n    }\n  },\n\n  async updateSettings(ctx: Koa.Context) {\n    const pluginStore = strapi.store({ type: 'plugin', name: 'documentation' });\n\n    const data = await validation.validateSettings(ctx.request.body);\n\n    const config: Config = {\n      restrictedAccess: Boolean(data.restrictedAccess),\n    };\n\n    if (data.password) {\n      config.password = await bcrypt.hash(data.password, 10);\n    }\n\n    await pluginStore.set({ key: 'config', value: config });\n\n    return ctx.send({ ok: true });\n  },\n};\n","import documentation from './documentation';\n\nexport default {\n  documentation,\n};\n","import type { PluginConfig } from '../types';\n\nexport const defaultConfig: PluginConfig = {\n  openapi: '3.0.0',\n  info: {\n    version: '1.0.0',\n    title: 'DOCUMENTATION',\n    description: '',\n    termsOfService: 'YOUR_TERMS_OF_SERVICE_URL',\n    contact: {\n      name: 'TEAM',\n      email: 'contact-email@something.io',\n      url: 'mywebsite.io',\n    },\n    license: {\n      name: 'Apache 2.0',\n      url: 'https://www.apache.org/licenses/LICENSE-2.0.html',\n    },\n  },\n  'x-strapi-config': {\n    plugins: null,\n    mutateDocumentation: null,\n  },\n  servers: [],\n  externalDocs: {\n    description: 'Find out more',\n    url: 'https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html',\n  },\n  security: [\n    {\n      bearerAuth: [],\n    },\n  ],\n  paths: {},\n  components: {\n    securitySchemes: {\n      bearerAuth: {\n        type: 'http',\n        scheme: 'bearer',\n        bearerFormat: 'JWT',\n      },\n    },\n    schemas: {\n      Error: {\n        type: 'object',\n        required: ['error'],\n        properties: {\n          data: {\n            nullable: true,\n            oneOf: [{ type: 'object' }, { type: 'array', items: { type: 'object' } }],\n          },\n          error: {\n            type: 'object',\n            properties: {\n              status: {\n                type: 'integer',\n              },\n              name: {\n                type: 'string',\n              },\n              message: {\n                type: 'string',\n              },\n              details: {\n                type: 'object',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n","import { defaultConfig } from './default-plugin-config';\n\nexport const config = {\n  default: defaultConfig,\n};\n","import { bootstrap } from './bootstrap';\nimport { register } from './register';\nimport services from './services';\nimport routes from './routes';\nimport controllers from './controllers';\nimport { config } from './config';\n\nexport default {\n  bootstrap,\n  config,\n  routes,\n  controllers,\n  register,\n  services,\n};\n"],"names":["strapi","config","getApiResponses","queryParams","createService","builApiEndpointPath","documentation","override"],"mappings":"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"}